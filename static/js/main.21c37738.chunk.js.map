{"version":3,"sources":["component/style.module.css","component/Form/index.js","component/SocialLinks/index.js","component/index.js","containers/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","className","action","method","type","name","value","placeholder","SocialLink","props","href","iconclass","OffersPopUp","state","show","close","console","log","setState","render","Styles","popup","hide","box","data-wow-duration","onClick","content","socailLinks","container","checkmark","React","Component","PopupContainer","subscribe","onSubscribe","this","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,IAAM,mBAAmB,IAAM,mBAAmB,MAAQ,qBAAqB,QAAU,uBAAuB,YAAc,2BAA2B,UAAY,yBAAyB,UAAY,yBAAyB,KAAO,sB,uOCY1QC,G,MATF,WACT,OACI,0BAAMC,UAAU,YAAYC,OAAO,GAAGC,OAAO,QAC3C,2BAAOC,KAAK,OAAOC,KAAK,GAAGC,MAAM,GAAGC,YAAY,qBAChD,2BAAOH,KAAK,SAASC,KAAK,GAAGC,MAAM,kBCM9BE,G,MARI,SAACC,GAChB,OACM,uBAAGC,KAAK,KACR,uBAAGT,UAAWQ,EAAME,e,gBC8CfC,E,2MA3CbC,MAAM,CACJC,MAAK,G,EAGPC,MAAM,WACRC,QAAQC,IAAI,UACR,EAAKC,SAAS,CAACJ,MAAK,K,EAItBK,OAAS,WACT,OACE,yBAAKlB,UAAS,UAAKmB,IAAOC,MAAZ,wBAAkC,EAAKR,MAAMC,KAAiB,GAAZM,IAAOE,OACvE,yBAAKrB,UAAS,UAAKmB,IAAOG,IAAZ,2BAA0CC,oBAAkB,MACxE,0BAAMvB,UAAWmB,IAAOL,MAAOU,QAAS,EAAKV,OAC7C,uBAAGd,UAAU,kBACT,yBAAKA,UAAWmB,IAAOM,SACrB,mEACA,oFACA,kBAAC,EAAD,MACA,yBAAKzB,UAAWmB,IAAOO,aACvB,kBAAC,EAAD,CAAYhB,UAAU,sBACtB,kBAAC,EAAD,CAAYA,UAAU,yBACtB,kBAAC,EAAD,CAAYA,UAAU,mBACtB,kBAAC,EAAD,CAAYA,UAAU,oBAEtB,2BAAOV,UAAWmB,IAAOQ,WAAzB,+BACE,2BAAOxB,KAAK,aACZ,0BAAMH,UAAWmB,IAAOS,iB,6BA/BZC,IAAMC,WCKjBC,E,2MATbC,UAAY,a,wEAGV,OACM,kBAAC,EAAD,CAAgBC,YAAaC,KAAKF,gB,GANfF,a,MCcdK,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,0CAIF,kBAAC,EAAD,QCAcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAO,kBAAC,EAAD,MAASwB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21c37738.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"popup\":\"style_popup__KUXXW\",\"box\":\"style_box__3SGWr\",\"wow\":\"style_wow__W0NZw\",\"close\":\"style_close__2_J8-\",\"content\":\"style_content__3Rq6A\",\"socailLinks\":\"style_socailLinks__2gSkI\",\"container\":\"style_container__3-zuG\",\"checkmark\":\"style_checkmark__1pHDz\",\"hide\":\"style_hide__3iHdz\"};","\r\nimport React from \"react\" ;\r\nimport \"./style.css\";\r\n\r\nconst Form = () => {\r\n    return (\r\n        <form className=\"subscribe\" action=\"\" method=\"post\">\r\n          <input type=\"text\" name=\"\" value=\"\" placeholder=\"Enter Your email\"/>\r\n          <input type=\"submit\" name=\"\" value=\"Subscribe!\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form ;\r\n","import React from \"react\" ;\r\nimport \"./style.css\";\r\n\r\n\r\n\r\n\r\nconst SocialLink = (props) => {\r\n    return(\r\n          <a href=\"#\">\r\n          <i className={props.iconclass}></i>\r\n          </a>\r\n    )\r\n}\r\n\r\nexport default SocialLink ;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport Form from \"./Form\";\r\nimport SocialLink from \"./SocialLinks\"\r\nimport Styles from './style.module.css';\r\n\r\n\r\n\r\nclass OffersPopUp extends React.Component{\r\n\r\n\r\n  state={\r\n    show:true\r\n  }\r\n\r\n  close=()=>{\r\nconsole.log('closed');\r\n    this.setState({show:false});\r\n\r\n  }\r\n\r\n  render = ()=>{\r\n  return (\r\n    <div className={`${Styles.popup} text-center ${!this.state.show?Styles.hide:''}` }  >\r\n    <div className={`${Styles.box} text-center wow zoomIn`} data-wow-duration=\"1s\">\r\n      <span className={Styles.close} onClick={this.close}>\r\n      <i className=\"fas fa-times\"></i></span>\r\n          <div className={Styles.content}>\r\n            <p>Your Next Purchase When You Sign Up.</p>\r\n            <p>By signing up, you accept the terms & Privacy Policy.</p>\r\n            <Form />\r\n            <div className={Styles.socailLinks}>\r\n            <SocialLink iconclass=\"fab fa-facebook-f\" />\r\n            <SocialLink iconclass=\"fab fa-google-plus-g\" />\r\n            <SocialLink iconclass=\"fab fa-twitter\" />\r\n            <SocialLink iconclass=\"fab fa-youtube\" />\r\n        </div>\r\n            <label className={Styles.container}> Don't show this popup again\r\n              <input type=\"checkbox\"/>\r\n              <span className={Styles.checkmark}></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        </div>\r\n  )\r\n}\r\n}\r\n\r\n\r\n\r\nOffersPopUp.propTypes = {\r\n  onSubscribe: PropTypes.func.isRequired\r\n}\r\n\r\nexport default OffersPopUp;\r\n","import React, { Component } from 'react';\r\nimport PopupComponent from '../component/index.js';\r\n\r\nclass PopupContainer extends Component {\r\n\r\n  subscribe = () => {\r\n  }\r\n  render() {\r\n    return (\r\n          <PopupComponent onSubscribe={this.subscribe} />\r\n    )\r\n  }\r\n};\r\n\r\nexport default PopupContainer;\r\n","import React from 'react';\nimport PopupMenu from './containers';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Popup Form\n        </p>\n      </header>\n      <PopupMenu />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}